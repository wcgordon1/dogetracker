---
// No server-side code needed
---

<section class="py-12 px-4 bg-gray-50">
  <div class="max-w-7xl mx-auto">
    <h2 class="text-2xl font-bold text-center text-[#0D132D] mb-8">Latest Doge News</h2>
    <div id="news-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <div class="flex items-center justify-center col-span-1 md:col-span-2 lg:col-span-3 py-12">
        <div class="flex flex-col items-center gap-4">
          <svg class="animate-spin h-8 w-8 text-[#0D132D]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span class="text-gray-600">Loading newsfeed...</span>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  const CACHE_KEY = 'doge_news_grid_cache';
  const CACHE_DURATION = 12 * 60 * 60 * 1000; // 12 hours

  async function loadNews() {
    const gridElement = document.getElementById('news-grid');
    if (!gridElement) return;

    try {
      // Check cache first
      const cached = localStorage.getItem(CACHE_KEY);
      if (cached) {
        const { data, timestamp } = JSON.parse(cached);
        if (Date.now() - timestamp < CACHE_DURATION) {
          updateGrid(data);
          return;
        }
      }

      const { fetchRSSFeed } = await import('../lib/rss');
      const news = await fetchRSSFeed();

      // Cache the results
      localStorage.setItem(CACHE_KEY, JSON.stringify({
        data: news,
        timestamp: Date.now()
      }));

      updateGrid(news);
    } catch (error) {
      console.error('Failed to load news:', error);
      showError(gridElement);
    }
  }

  function updateGrid(news) {
    const gridElement = document.getElementById('news-grid');
    if (!gridElement) return;

    // More strict filtering and get up to 50 valid items
    const validNews = news
      .filter(item => 
        item.title?.trim() && 
        item.description?.trim() && 
        item.link?.trim() &&
        item.source?.trim() &&
        item.pubDate?.trim()
      )
      .map(item => ({
        ...item,
        description: item.description.replace(/<[^>]*>/g, '').trim() // Remove HTML tags
      }))
      .slice(0, 50); // Changed from 6 to 50

    // Only render if we have valid items
    if (validNews.length === 0) {
      showError(gridElement);
      return;
    }

    const newsHtml = validNews.map(item => `
      <a 
        href="${item.link}"
        target="_blank" 
        rel="noopener noreferrer" 
        class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden"
      >
        <article class="p-6">
          <h3 class="text-lg font-semibold text-[#0D132D] mb-3 line-clamp-2 hover:text-blue-600">
            ${item.title}
          </h3>
          <p class="text-sm text-gray-600 mb-3 line-clamp-4">
            ${item.description}
          </p>
          <div class="text-sm flex items-center gap-2">
            <span class="font-bold text-[#0D132D]">${item.source}</span>
            <span class="text-gray-500">â€¢ ${item.pubDate}</span>
          </div>
        </article>
      </a>
    `).join('');

    gridElement.innerHTML = newsHtml;
  }

  function showError(element) {
    element.innerHTML = `
      <div class="col-span-1 md:col-span-2 lg:col-span-3 text-center text-gray-600">
        Failed to load news. Please try again later.
      </div>
    `;
  }

  // Initialize as soon as possible
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadNews);
  } else {
    loadNews();
  }
</script>